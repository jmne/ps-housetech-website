openapi: 3.0.0
info:
  title: Einleitung
  version: 0.1.0
  description: These are the docs for the PS HouseTech Backend API.
  contact:
    name: PS HouseTech
    url: https://zivgitlab.uni-muenster.de/ml-de/teaching/ps-house-tech/
  license:
    name: MIT-Lizenz
    url: https://de.wikipedia.org/wiki/MIT-Lizenz
servers:
  - url: https://ps-housetech.uni-muenster.de/
    description: Production Server (you need to be in the Uni Muenster network)
    variables:
      lang:
        default: de
        enum:
          - de
          - en
        description: Sprache mit der API Anfragen beantwortet werden.
paths:
  /api/bus/{language}:
    summary: Bus Data - Stadtwerke Münster
    description: Abfragen der Bus Daten von den Stadtwerken Münster.
    get:
      summary: Bus Daten - Stadtwerke
      description: Abfragen der Bus Daten von den Stadtwerken Münster.
      operationId: bus-data
      parameters:
          - in: path
            name: language
            description: language selector
            required: true
            schema:
              enum:
                - de
                - en
      responses:
        '200':
          description: >-
            Abfragen der Bus Daten von den Stadtwerken Münster für Haltestellen
            am Leo-Campus.
          content:
            application/json:
              examples:
                Bus Data:
                  value:
                    properties:
                      richtung: string
                      nr: string
                      lbez: string
                      typ: string
                      kbez: string
                    geometry:
                      coordinates:
                        - 0
      tags:
        - Bus Plan
  /api/calendar:
    summary: Calendar Data - Exchange Server
    description: Get access to Exchange Server and retrieve Exchange Calendar events
    get:
      summary: Calendar Data - Exchange Server
      description: >-
        Access to exchange server of room in Leonardo Campus and fetch the calendar events from room
      operationId: exchange-data
      responses:
        '200':
          description: >-
           Exchange calendar data
          content:
            application/json:
              examples:
                Calendar Data:
                  value:
                    properties:
                      title: string
                      organizer_name: string
                      organizer_email: string
                      location: string
                      duration: string
                      start: DateTime

      tags:
        - Calendar
  /api/cris/{language}:
    summary: CRIS Data
    description: Get access to CRIS data using the API of Uni-Muenster
    get:
      summary: CRIS Data -  API of Uni-Muenster
      description: >-
        Get access to CRIS data using the API of Uni-Muenster
      operationId: cris-data
      parameters:
        - name: language
          in: path
          description: language selector
          required: true
          schema:
            enum:
              - de
              - en
      responses:
        '200':
          description: >-
           Contact data of each employee in CRIS
          content:
            application/json:
              examples:
                Cris Data:
                  value:
                    properties:
                      academicTitle: string
                      cfFirstNames: string
                      cfFamilyNames: string
                      roomNumber: integer
                      emails: string
                      phones: string
                      chair: string
                      image: integer
                      address: string
      tags:
        - CRIS
  /api/mensa/{mensa_name}/{language}:
    summary: Cafeteria Data
    description: Get access to cafeteria plans in Münster using XML file URLs
    get:
      summary: Cafeteria Data
      description: >-
        Get access to cafeteria plans in Münster using XML file URLs
      operationId: cafeteria-data
      parameters:
        - name: mensa_name
          in: path
          description: Cafeteria Name
          required: true
          schema:
            enum:
              - davinci
              - aasee
              - ring
              - bispinghof
        - name: language
          in: path
          description: language selector
          required: true
          schema:
            enum:
              - de
              - en
      responses:
        '200':
          description: >-
           Cafeteria plans in German / English
          content:
            application/json:
              examples:
                Cafeteria Data:
                  value:
                    properties:
                      date: date
                      weekday: string
                    item:
                      meal: string
                      price1: float
                      price3: float
                      foodicons: string
                      allergens: string
      tags:
        - Mensa Plan
  /api/eink/{room_number}:
    summary: Generate E-Ink image in HEX Format
    description: Generate E-Ink image in HEX Format
    get:
      summary: E-Ink image generation
      description: >-
        Generate E-Ink image in HEX Format
      operationId: E-Ink image generator
      parameters:
        - name: room_number
          in: path
          description: room number
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: >-
           E-Ink image in HEX Format
          content:
            application/json:
              examples:
                E-ink Image Data:
                  value:
                    properties:
                      img: list
      tags:
        - Eink Image Generator
  /api/drupal/{content_type}:
    summary: Get Events Data using the Drupal URLs
    description: Get Events Data using the Drupal URLs
    get:
      summary: Events data
      description: >-
        Retrieve university events using Drupal URLs
      parameters:
        - name: content_type
          in: path
          description: content type
          required: true
          schema:
            enum:
              - event
              - overlay
      responses:
        '200':
          description: >-
           Events Data
          content:
            application/json:
              examples:
                Drupal Data:
                  value:
                    properties:
                      description: string
                      end_date: DateTime
                      id: integer
                      image: string
                      location: string
                      pubDate: DateTime
                      start_date: DateTime
                      subtitle: string
                      title: string
      tags:
        - Drupal
  /api/picture/{image_id}:
    summary: Add picture base 64 blob for every employee
    description: Add picture base 64 blob for every employee
    get:
      summary: Picture for every employee
      description: >-
        Retrieve picture base 64 blob for every employee
      parameters:
        - name: image_id
          in: path
          description: image id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: >-
           Image as bytes
          content:
            application/json:
              examples:
                Picture Data:
                  value:
                    properties:
                      image/jpeg: {}
      tags:
        - Picture
  /api/instagram:
    summary: Fetch post data from Instagram API
    description: Fetch post data from Instagram API
    get:
      summary: Post data from Instagram API
      description: >-
        Fetch post data from Instagram API
      responses:
        '200':
          description: >-
           Latest 5 Instagram post data
          content:
            application/json:
              examples:
                Instagram Data:
                  value:
                    properties:
                      caption: string
                      media_type: string
                      media_url: string
                      timestamp: DateTime
      tags:
        - Instagram
  /api/weather:
    summary: Get weather data using the API of OpenWeatherMap
    description: Get weather data using the API of OpenWeatherMap
    get:
      summary: Get weather data using the API of OpenWeatherMap
      description: >-
        Get weather data using the API of OpenWeatherMap
      responses:
        '200':
          description: >-
           Weather forecast for the next 24 hours / days
          content:
            application/json:
              examples:
                Weather Data:
                  value:
                    properties:
                      icon: string
                      temp: double
                      pop: double
                      time: DateTime
                      day: Date
                      weekday: string
      tags:
        - Weather
  /api/precipitation/{z}/{x}/{y}:
    summary: Get precipitation data (map) from OpenWeather API
    description: Get precipitation data (map) from OpenWeather API
    get:
      summary: Get precipitation data (map)
      description: >-
        Get precipitation data (map) from OpenWeather API
      parameters:
        - name: z
          in: path
          description: Number of zoom level
          required: true
          schema:
            type: integer
        - name: x
          in: path
          description: Number of x tile coordinate
          required: true
          schema:
            type: integer
        - name: y
          in: path
          description: Number of y tile coordinate
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: >-
           Precipitation data
          content:
            application/json:
              examples:
                Weather Data:
                  value:
                    properties:
                      image/png: {}
      tags:
        - Precipitation data
  /api/event:
    summary: Get special days in a year
    description: Get special days in a year
    get:
      summary: Get special days in a year
      description: >-
        Get special days in a year
      responses:
        '200':
          description: >-
           special days in a year
          content:
            application/json:
              examples:
                Event Data:
                  value:
                    properties:
                      today.month: integer
                      today.day: integer
                      event: string
      tags:
        - Event
  /api/help:
    summary: Print available API endpoints
    description: Print available API endpoints
    get:
      summary: Print available API endpoints
      description: >-
        Print available API endpoints
      responses:
        '200':
          description: >-
           available API endpoints
          content:
            application/json:
              examples:
                Help Data:
                  value:
                    properties:
                      func_list: list
      tags:
        - Help
  /api:
    summary: Redirect - API Docs
    description: Weiterleitung zu der API Dokumentation.
    head:
      summary: API Dokumentation
      description: Weiterleitung zu der API Dokumentation
      operationId: redirect-api
      responses:
        '302':
          description: Weiterleitung zu der API Dokumentation
      tags:
        - weitere-abfragen

externalDocs:
  url: /docs
  description: Dokumentation von PS HouseTech.


